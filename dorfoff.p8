pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- main
printh("\n\n-------\n-us sales operations-\n-------")

-- constants

-- sounds

-- game state
actors = {} -- workers and stuff

function _init()
	a1 = worker.new({
		tile = 1,
		sprite = 1
	})
	a2 = worker.new({
		tile = 191,
		sprite = 0
	})
	add(actors, a1)
	add(actors, a2)
	graph = generate_graph()
	a1:set_path(path(a1.tile, a2.tile))
end

function _update()
	for a in all(actors) do
	  a:update()
	end
end

function _draw()
	cls()
	mapdraw(0,0,0,0,16,16)
	for a in all(actors) do
		a:draw()
	end
	-- draw_indicies()
	-- draw_path(actors[1].path)
end

-->8
-- helper stuff

-- tables
function includes(tab, val)
	for v in all(tab) do
		if(v == val) return true
	end
	return false
end

function select(t)
	return t[flr(rnd(#t))+1]
end

function copy(t) -- shallow-copy a table
	-- if type(t) ~= "table" then return t end
	-- local meta = getmetatable(t)
	local target = {}
	for k, v in pairs(t) do target[k] = v end
	-- setmetatable(target, meta)
	return target
end

function unshift(arr, val)
	local tmp = {val}
	for v in all(arr) do
		add(tmp,v)
	end
	return tmp
end

-- insert into table and sort by priority
function insert(t, val, p)
	if #t >= 1 then
		add(t, {})
		for i=(#t),2,-1 do
			local next = t[i-1]
			if p < next[2] then
				t[i] = {val, p}
				return
			else
				t[i] = next
			end
		end
		t[1] = {val, p}
	else
		add(t, {val, p})
	end
end

-- pop the last element off a table
function popend(t)
	local top = t[#t]
	del(t,t[#t])
	return top
end

function reverse(t)
	for i=1,(#t/2) do
		local temp = t[i]
		local oppindex = #t-(i-1)
		t[i] = t[oppindex]
		t[oppindex] = temp
	end
end

-- math

function manhattan_distance(p1, p2)
	return abs(p1.x - p2.x) + abs(p1.y - p2.y)
end

-- priority queue!

-->8
-- map stuff

graph = {}
min_graph_index = 0
max_graph_index = 16*16
min_x = 0
max_x = 15
min_y = 0
max_y = 15
impassible = 0

function point(x, y)
	return {x=x, y=y}
end

function get_flag(pos, flag)
	return fget(mget(pos.x, pos.y), flag)
end

-- create a cached graph of the map. each space on the map is indexed
function generate_graph()
	local graph = {}
	for i=min_graph_index,max_graph_index do
		local node = {}
		node.occupants = {}
		node.index = i
		node.pos = index_to_pos(i)
		node.passible = not get_flag(node.pos, impassible)
		node.neighbors = get_valid_neighbors(node)
		graph[i] = node
	end
	return graph
end

--[[
translate between map indexes and x,y coords
for instance:
	pos_to_index(point(4, 0)) -- 4
	pos_to_index(point(1, 4)) -- 65
	index_to_pos(255) -- 15, 16
-- ]]
function index_to_pos(index)
	local y = flr(index/16)
	local x = index % 16
	return point(x, y)
end

function pos_to_index(pos)
	return ((pos.y) * 16) + pos.x
end

function get_valid_neighbors(node)
	local neighbors = {}
	if not node.passible then
		return neighbors
	end
	local pos = node.pos
	for yi=-1,1 do
		for xi=-1,1 do
			local neighbor_pos = point(pos.x + xi,pos.y+yi)
			-- not out of the play area, not the current point, and passible tile
			if neighbor_pos.x >= min_x and neighbor_pos.x <= max_x and
				 neighbor_pos.y >= min_y and neighbor_pos.y <= max_y and
				 not (neighbor_pos.x == pos.x and neighbor_pos.y == pos.y) and
				 not get_flag(neighbor_pos, impassible)
			then
				if pos_to_index(neighbor_pos) > 255 then
					printh('uh oh: '.. pos_to_index(neighbor_pos) .. ' ' .. neighbor_pos.x .. ',' .. neighbor_pos.y)
				end
				add(neighbors, pos_to_index(neighbor_pos))
			end
		end
	end
	return neighbors
end

function path(start, dest, prox)
	if not graph[dest] then
		printh('error node not found: ' .. dest)
	end
	local prox = prox or false

	local frontier = {}
	local came_from = {}
	local cost_so_far = {}
	insert(frontier, start, 0)
	came_from[start] = nil
	cost_so_far[start] = 0

	while (#frontier > 0 and #frontier < 1000) do
		local current = popend(frontier)[1]
 
		if close_enough(current, dest, prox) then
			dest = current
			break
		end

		local neighbors = graph[current].neighbors
		local new_cost = cost_so_far[current] + 1
		for next in all(neighbors) do
			if (cost_so_far[next] == nil) or (new_cost < cost_so_far[next]) then
				cost_so_far[next] = new_cost
				if not graph[next] then
				  printh('error node not found: ' .. next)
				end
				local priority = new_cost + manhattan_distance(graph[dest].pos, graph[next].pos)
				insert(frontier, next, priority)

				came_from[next] = current
			end
		end
	end

	local current = came_from[dest]
	local path = {}
	while current != start do
		add(path, current)
		current = came_from[current]
	end
	return path
end

-- a and b are expected to be points
function close_enough(a, b, prox)
	if prox then
		return manhattan_distance(graph[a].pos, graph[b].pos) > 2
	else
		return a == b
	end
end

-- helper function that can eventually go away
function draw_indicies()
	for node in all(graph) do
		if node.passible then
			print(node.index, node.pos.x * 8, node.pos.y * 8, 1)
		end
	end
end

function draw_path(p)
	for i in all(p) do
		spr(
			15,
			graph[i].pos.x * 8,
			graph[i].pos.y * 8
		)
	end
end

-->8
-- worker 'class'

-- status
idle = 0
walking = 1

default_step_time = 4

worker = {
	player = 0,
	tile = 0,
	sprite = 1,
	task = idle,
	path = {},
	path_index = 0,
	step_timer = default_step_time,
	max_step_time = default_step_time
}

function worker.new(settings)
	local w = setmetatable((settings or {}), { __index = worker })
	return w
end

function worker:draw()
	spr(
		self.sprite,
		graph[self.tile].pos.x * 8,
		graph[self.tile].pos.y * 8
	)
end

function worker:update()
	self:update_timer()
	self:update_task()
	self:move()
end

function worker:update_timer()
	self.step_timer -= 1
	if self.step_timer < 0 then
		self.step_timer = self.max_step_time
	end	
end

function worker:update_task()
	if #self.path > 0 then
		self.task = walking
	else
		self.task = idle
 end 	
end

function worker:set_path(path)
	self.path = path
	self.path_index = #path
end

function worker:move()
	if (self.step_timer != 0 or self.task != walking) return
 self.tile = popend(self.path)
end
-->8
-- tests
-- translation tests
--[[
printh(pos_to_index(point(4, 0))) -- should be 4
printh(pos_to_index(point(1, 4))) -- should be 65
local pos = index_to_pos(5)
printh(pos.x .. ' ' .. pos.y) -- should be 5, 0
local pos2 = index_to_pos(254)
printh(pos2.x .. ' ' .. pos2.y) -- should be 14, 15
--]]


-- get_valid_neighbors_tests
--[[
printh('--0,0--')
-- expected: 1, 16, 17
local n1 = get_valid_neighbors({pos = point(0,0)})
for n in all(n1) do
	local posn = index_to_pos(n)
	printh('i:' .. n .. ' x,y: '.. posn.x .. ',' ..posn.y)
end
printh('--4,2--')
local n2 = get_valid_neighbors({pos = point(4,2)})
for n in all(n2) do
	local posn = index_to_pos(n)
	printh('i:' .. n .. ' x,y: '.. posn.x .. ',' ..posn.y)
end
--]]

-- map_graph_tests
--[[
graph = generate_map_graph()

printh('--4,2--')
node = graph[36]
printh('passible: ' .. node.passible)

printh('--3,2--')
node = graph[35]
printh('passible: ' .. node.passible)
for n in all(node.neighbors) do
	local posn = index_to_pos(n)
	printh('i:' .. n .. ' x,y: '.. posn.x .. ',' ..posn.y)
end
--]]

__gfx__
0044440000eeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
004f44000eefee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0f5ff5000fdffd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00ffff00eeffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028000
0777270007772700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008e000
07772700077727000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500005555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00500500005005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00544400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04544500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ccc4c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
666666666666666666d7dd666666666666d7dd6666d7dd6666d7dd6666d7dd660000000000000000000000000000000000000000000000000000000000000000
666666666666666666d7dd666666666666d7dd6666d7dd6666d7dd6666d7dd660000000000000000000000000000000000000000000000000000000000000000
666666666666666666d7dd6666ddddddddd7dd66ddd7dd66ddd7ddddddd7dddd0000000000000000000000000000000000000000000000000000000000000000
6666d6666666666666d7dd6666d777777777dd667777dd6677777777777777770000000000000000000000000000000000000000000000000000000000000000
666666666666666666d7dd6666d7dddddddddd66ddd7dd66ddddddddddd7dddd0000000000000000000000000000000000000000000000000000000000000000
666666666666666666d7dd6666d7dddddddddd66ddd7dd66ddddddddddd7dddd0000000000000000000000000000000000000000000000000000000000000000
666666666666666666d7dd6666d7dddddddddd66ddd7dd66ddddddddddd7dddd0000000000000000000000000000000000000000000000000000000000000000
666666666666666666d7dd6666d7dddddddddd66ddd7dd66ddddddddddd7dddd0000000000000000000000000000000000000000000000000000000000000000
6666666666666666666666666666666666d7dd666666666666d7dd66000000000000000000000000000000000000000000000000000000000000000000000000
6666666666666666666666666666666666d7dd666666666666d7dd66000000000000000000000000000000000000000000000000000000000000000000000000
6666666666666666dddddddddddddd6666d7dddddddddddd66d7dddd000000000000000000000000000000000000000000000000000000000000000000000000
6666666666666666777777777777dd6666d777777777777766d77777000000000000000000000000000000000000000000000000000000000000000000000000
6666666666666d66ddddddddddd7dd6666ddddddddd7dddd66d7dddd000000000000000000000000000000000000000000000000000000000000000000000000
6666666666666666ddddddddddd7dd6666ddddddddd7dddd66d7dddd000000000000000000000000000000000000000000000000000000000000000000000000
6e66666666666666ddddddddddd7dd6666ddddddddd7dddd66d7dddd000000000000000000000000000000000000000000000000000000000000000000000000
6666666666666666ddddddddddd7dd6666ddddddddd7dddde6d7dddd000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010000000000000000000001010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
4140414041414142415141414150414041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4151415051415142514141414141514151000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4041414143525247525341414141414150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5041515142414142504240414141414141000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4041414142404142414250414141415150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4150414056524146514440414141404140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4141414142404141405041414352524141000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4141414142414141414141414250515040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4041404142414141415040414241424141000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4141505141504041435252524541565252000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4151414141415041424141414250424141000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4041415041414151424152524441424151000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5252525552525252455041415041425141000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5051414241414151424152525252455051000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5141414251414143444151414151424141000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4141404141414140414141414150414140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4041415041514141414050514151415050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
